import csv

# Исходные данные
data = {
    "car": [
        "al - 500 / 403(80.6%) / 72(14.4%)",
        "at - 500 / 391(78.2%) / 66(13.2%)",
        "ba - 500 / 341(68.2%) / 92(18.4%)",
        "be - 500 / 441(88.2%) / 147(29.4%)",
        "bg - 500 / 305(61%) / 66(13.2%)",
        "by - 500 / 415(83%) / 128(25.6%)",
        "ch - 500 / 290(58%) / 86(17.2%)",
        "cy - 500 / 326(65.2%) / 160(32%)",
        "cz - 500 / 376(75.2%) / 75(15%)",
        "de - 500 / 353(70.6%) / 106(21.2%)",
        "dk - 500 / 281(56.2%) / 95(19%)",
        "ee - 500 / 294(58.8%) / 146(29.2%)",
        "es - 500 / 290(58%) / 52(10.4%)",
        "fi - 500 / 265(53%) / 72(14.4%)",
        "fr - 500 / 330(66%) / 28(5.6%)",
        "ge - 500 / 406(81.2%) / 78(15.6%)",
        "gi - 500 / 339(67.8%) / 43(8.6%)",
        "gr - 500 / 319(63.8%) / 39(7.8%)",
        "hr - 500 / 315(63%) / 58(11.6%)",
        "hu - 500 / 457(91.4%) / 48(9.6%)",
        "ie - 500 / 280(56%) / 145(29%)",
        "is - 500 / 406(81.2%) / 62(12.4%)",
        "it - 500 / 265(53%) / 100(20%)",
        "li - 500 / 1(0.2%) / 102(20.4%)",
        "It - 500 / 373(74.6%) / 206(41.2%)",
        "lu - 500 / 456(91.2%) / 76(15.2%)",
        "Iv - 500 / 344(68.8%) / 139(27.8%)",
        "md - 500 / 278(55.6%) / 83(16.6%)",
        "me - 500 / 440(88%) / 36(7.2%)",
        "mk - 500 / 238(47.6%) / 67(13.4%)",
        "mt - 500 / 399(79.8%) / 118(23.6%)",
        "nl - 500 / 298(59.6%) / 142(28.4%)",
        "no - 500 / 316(63.2%) / 72(14.4%)",
        "pl - 500 / 429(85.8%) / 110(22%)",
        "pt - 500 / 365(73%) / 96(19.2%)",
        "ro - 500 / 344(68.8%) / 120(24%)",
        "rs - 500 / 289(57.8%) / 39(7.8%)",
        "se - 500 / 297(59.4%) / 75(15%)",
        "si - 500 / 302(60.4%) / 52(10.4%)",
        "sk - 500 / 390(78%) / 55(11%)",
        "tr - 500 / 289(57.8%) / 195(39%)",
        "ua - 500 / 254(50.8%) / 58(11.6%)",
        "uk - 500 / 76(15.2%) / 55(11%)"
    ],
    "motorbike": [
        "al_m - 69 / 61(67.8%) / 68(98.6%)",
        "at_m - 90 / 76(84.4%) / 87(96.7%)",
        "ba_m - 90 / 55(61.1%) / 84(93.3%)",
        "be_m - 90 / 55(61.1%) / 88(97.8%)",
        "bg_m - 90 / 59(65.6%) / 85(94.4%)",
        "by_m - 90 / 73(81.1%) / 83(92.2%)",
        "ch_m - 90 / 84(93.3%) / 85(94.4%)",
        "cy_m - 82 / 57(63.3%) / 74(90.2%)",
        "cz_m - 90 / 58(64.4%) / 84(93.3%)",
        "de_m - 90 / 61(67.8%) / 81(90%)",
        "dk_m - 90 / 38(42.2%) / 87(96.7%)",
        "ee_m - 90 / 64(71.1%) / 83(92.2%)",
        "es_m - 90 / 61(67.8%) / 87(96.7%)",
        "fi_m - 90 / 53(58.9%) / 87(96.7%)",
        "fr_m - 90 / 60(66.7%) / 85(94.4%)",
        "ge_m - 90 / 71(78.9%) / 90(100%)",
        "gi_m - 68 / 53(58.9%) / 68(100%)",
        "gr_m - 90 / 65(72.2%) / 89(98.8%)",
        "hr_m - 90 / 49(54.4%) / 87(96.7%)",
        "hu_m - 90 / 86(95.6%) / 85(94.4%)",
        "ie_m - 90 / 41(45.6%) / 77(85.6%)",
        "is_m - 8 / 0 / 8(100%)",
        "it_m - 90 / 45(50%) / 86(95.6%)",
        "li_m - 90 / 0 / 90(100%)",
        "It_ m - 90 / 73(81.1%) / 85(94.4%)",
        "lu_m - 90 / 74(82.2%) / 83(92.2%)",
        "Iv_m - 90 / 83(92.2%) / 88(97.8%)",
        "md_m - 90 / 68(75.6%) / 81(90%)",
        "me_m - 90 / 65(72.2%) / 88(97.8%)",
        "mk_m - 90 / 45(50%) / 86(95.6%)",
        "mt_m - 90 / 61(67.8%) / 89(98.9%)",
        "nl_m - 90 / 31(34.4%) / 87(96.7%)",
        "no_m - 90 / 65(72.2%) / 84(93.3%)",
        "pl_m - 90 / 85(94.4%) / 88(97.8%)",
        "pt_m - 90 / 48(53.3%) / 87(96.7%)",
        "ro_m - 90 / 77(85.6%) / 87(96.7%)",
        "rs_m - 90 / 17(18.9%) / 90(100%)",
        "se_m - 90 / 55(61.1%) / 87(96.7%)",
        "si_m - 90 / 66(73.3%) / 87(96.7%)",
        "sk_m - 90 / 59(65.6%) / 86(95.6%)",
        "tr_m - 90 / 64(71.1%) / 85(94.4%)",
        "ua_m - 90 / 63(70%) / 83(92.2%)",
        "uk_m - 90 / 7(7.8%) / 87(96.7%)"
    ]
}

# Функция для обработки строки
def process_row(row):
    parts = row.split(" - ")
    country = parts[0].strip()
    numbers = parts[1].split(" / ")
    num_images = int(numbers[0].strip())
    num_annotations_with_country = int(numbers[1].split("(")[0].strip())
    num_multiline = int(numbers[2].split("(")[0].strip())
    return country, num_images, num_annotations_with_country, num_multiline

# Имя выходного файла
output_file = "europe_data.csv"

# Обработка и запись в CSV
with open(output_file, mode="w", newline="", encoding="utf-8") as file:
    writer = csv.writer(file, delimiter=";")
    writer.writerow(["car_or_motorbike", "country", "num_images", "num_annotations_with_country", "num_multiline"])

    for car_or_motorbike, rows in data.items():
        for row in rows:
            country, num_images, num_annotations_with_country, num_multiline = process_row(row)
            writer.writerow([car_or_motorbike, country, num_images, num_annotations_with_country, num_multiline])

print(f"Данные успешно сохранены в файл: {output_file}")




import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Чтение данных из CSV
csv_file = "europe_data.csv"
data = pd.read_csv(csv_file, delimiter=";")

# Разделение данных для car и motorbike
car_data = data[data["car_or_motorbike"] == "car"]
motorbike_data = data[data["car_or_motorbike"] == "motorbike"]

# Установка ширины столбцов и положения на оси x
x = np.arange(len(car_data["country"]))  # Количество стран
width = 0.25  # Ширина столбца

# Построение графика для car
plt.figure(figsize=(20, 10))
plt.bar(x - width, car_data["num_images"], width, label="Car - Images")
plt.bar(x, car_data["num_annotations_with_country"], width, label="Car - Annotations")
plt.bar(x + width, car_data["num_multiline"], width, label="Car - Multiline")

# Добавление подписей для car
plt.xticks(x, car_data["country"], rotation=90)
plt.title("Car Data Visualization")
plt.xlabel("Country")
plt.ylabel("Counts")
plt.legend()
plt.tight_layout()
plt.show()

# Построение графика для motorbike
plt.figure(figsize=(20, 10))
plt.bar(x - width, motorbike_data["num_images"], width, label="Motorbike - Images")
plt.bar(x, motorbike_data["num_annotations_with_country"], width, label="Motorbike - Annotations")
plt.bar(x + width, motorbike_data["num_multiline"], width, label="Motorbike - Multiline")

# Добавление подписей для motorbike
plt.xticks(x, motorbike_data["country"], rotation=90)
plt.title("Motorbike Data Visualization")
plt.xlabel("Country")
plt.ylabel("Counts")
plt.legend()
plt.tight_layout()
plt.show()
